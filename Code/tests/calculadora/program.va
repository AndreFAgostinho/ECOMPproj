# START

_start nop

# Acquire operands and operation
## R15 is the state counter, R14 is the 1º op signal, R13 is the 1º op, R12 is
## the operation, R11 is the 2º op signal, R10 is the 2º op, R9 is the release
## ignore bit, R7 is the return-to-address register
## states:
## 1 - acquire 1º op signal if key is signal, pass to 2. else pass to 2
## 2 - acquire 2º op
## 3 - operation
## 4 - 2º op signal
## 5 - 2º op
## 6 - wait for enter
## 7 - compute and display
        ldi _return_1
        wrw R7 # save the return address
        ldi 0
        beqi _acquire_key
_return_1

## acquire_key routine
_acquire_key nop
        # wait for new key press
        rdw PS2_BASE
        wrw R1 # store the ps2 module output unchanged
        ## RA >> 8 to get new key bit (maybe optimizable with a loop)
        shft 1 #1
        shft 1 #2
        shft 1 #3
        shft 1 #4
        shft 1 #5
        shft 1 #6
        shft 1 #7
        shft 1 #8
        ##
        beqi _acquire_key # loop
        nop
        nop

        #take out the valid bit from the ps2 output
        ldi 0x0FF # mask for 8 last bits
        wrw R2 # R2 <- mask
        rdw R1 # RA <- R1
        and R2 # R1 AND mask
        wrw R1 # R1 <- key code. R1 now only contains the key code

        ldi 0
        beq _return_1 # return
## end acquire_key - key code is in R1

# number keycodes
# 0 | 70
# 1 | 69
# 2 | 72
# 3 | 7A
# 4 | 6B
# 5 | 73
# 6 | 74
# 7 | 6C
# 8 | 75
# 9 | 7D

# operations keycodes
# + | 79
# - | 7B
# * | 7C
# / | 4A


# Do operation



# Print result

# loop to start
        ldi 0
        beqi _start
        nop
        nop

# (never) finish program by jumping back to boot ROM
_finish	nop
        ldi 0
        beqi PROG_ROM
        nop
        nop

